# Load igraph
library(igraph)
renv::init()
friends <- read.csv("../data/raw_data/friends.csv")
getwd()
friends <- read.csv("./data/raw_data/friends.csv")
library(caTools)
knitr::opts_chunk$set(echo = TRUE)
friends <- read.csv("../data/raw_data/friends.csv")
friends <- read.csv("./data/raw_data/friends.csv")
# Inspect the first few rows of the dataframe 'friends'
head(friends)
renv::status()
renv::install("rmarkdown")
renv::status()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
Create an igraph object with attributes directly from dataframes
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Subset edges greater than or equal to 5 hours
E(g1)[[hours > 5]]
# Set vertex color by gender
V(g1)$color <- ifelse(V(g1)$gender == 'F', "orange", "dodgerblue")
# Plot the graph
plot(g1, vertex.label.color = "black")
## Visualizing attributes.
##
# Create an igraph object with attributes directly from dataframes
friends1_edges <- read.csv("./data/raw_data/friends_edges.csv")
friends1_nodes <- read.csv("./data/raw_data/friendship_network_node_data.csv")
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
# Subset edges greater than or equal to 5 hours
E(g1)[[hours > 5]]
g1 <- graph_from_data_frame(d = friends1_edges, vertices = friends1_nodes, directed = FALSE)
?vector
?fastgreedy.community
?quantile
?igraph
??igraph
g1 <- read.csv("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml")
str(g1)
igraph::read.graph()
?igraph::read.graph()
library(igraph)
g1 <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
retweer_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("glm"))
retweer_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
# Count the number of nodes in retweet_graph
gorder(retweet_graph)
retweet_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
# Count the number of nodes in retweet_graph
gorder(retweet_graph)
# Calculate the graph density of retweet_graph
graph.density(retweet_graph)
# Plot retweet_graph
plot(retweet_graph)
g1 <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/3616921dcf861543ac08b6da2525d40ca3af0c31/ment_g.gml", format = c("gml"))
rm(retweer_graph)
rm(retweet_graph)
g1 <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/3616921dcf861543ac08b6da2525d40ca3af0c31/ment_g.gml", format = c("gml"))
g1 <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
write_graph(g1, "retweet_graph", "gml")
#retweet_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
retweet_graph <- read_graph("retweet_graph", format = "gml")
#retweet_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
retweet_graph <- read_graph("retweet_graph", format = c("gml"))
#retweet_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
retweet_graph <- read_graph("retweet_graph")
#retweet_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
retweet_graph <- read.graph("retweet_graph", format = c("gml"))
#retweet_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
retweet_graph <- read.graph("retweet_graph.gml", format = c("gml"))
getwd()
#retweet_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
retweet_graph <- read_graph("retweet_graph.gml", format = "gml")
getwd()
#retweet_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/edd5a8859ff65d52f34340fd003ffa53efc2ffd8/rt_g.gml", format = c("gml"))
retweet_graph <- read_graph("TwitterCaseStudy/retweet_graph.gml", format = c("gml"))
g1 <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/3616921dcf861543ac08b6da2525d40ca3af0c31/ment_g.gml", format = c("gml"))
g1[[1]]
g1$thinkR_fr
g1[[1]]$thinkR_fr
class(g1[[1]]$thinkR_fr)
class(retweet_graph)
mentioned_graph <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/3616921dcf861543ac08b6da2525d40ca3af0c31/ment_g.gml", format = c("gml"))
# Read this code
mention_data <- data_frame(
graph_type = "mention",
degree_in = degree(mention_graph, mode = "in"),
degree_out = degree(mention_graph, mode = "out"),
io_ratio = degree_in / degree_out
)
g1 <- read_graph("https://assets.datacamp.com/production/repositories/1576/datasets/3616921dcf861543ac08b6da2525d40ca3af0c31/ment_g.gml", format = c("gml"))
degree(mention_graph, mode = "in")
degree(mention_graph[[1]]$thinkR_fr , mode = "in")
g1 <- read.graph("https://assets.datacamp.com/production/repositories/1576/datasets/3616921dcf861543ac08b6da2525d40ca3af0c31/ment_g.gml", format = c("gml"))
rgraph <- read_graph("TwitterCaseStudy/ment_g.gml", format = c("gml"))
gorder(g1)
gsize(g1)
graph.density(g1)
plot(g1)
rm(g1),rm(rgraph)
rm(c(g1,rgraph))
c(rm(g1),rm(rgraph))
mentioned_graph <- read_graph("TwitterCaseStudy/ment_g.gml", format = c("gml"))
gorder(mentioned_graph)
degree(mentioned_graph)
# Read this code
mention_data <- data_frame(
graph_type = "mention",
degree_in = degree(mention_graph, mode = "in"),
degree_out = degree(mention_graph, mode = "out"),
io_ratio = degree_in / degree_out
)
mention_data <- data.frame(
graph_type = "mention",
degree_in = degree(mention_graph, mode = "in"),
degree_out = degree(mention_graph, mode = "out"),
io_ratio = degree_in / degree_out
)
# Create a dataset of retweet ratios from the retweet_graph
retweet_data <- data.frame(
graph_type = "retweet",
degree_in = degree(retweet_graph, mode = "in"),
degree_out = degree(retweet_graph, mode = "out"),
io_ratio = degree_in / degree_out
)
mention_graph <- read_graph("TwitterCaseStudy/ment_g.gml", format = c("gml"))
# Read this code
mention_data <- data.frame(
graph_type = "mention",
degree_in = degree(mention_graph, mode = "in"),
degree_out = degree(mention_graph, mode = "out"),
io_ratio = degree_in / degree_out
)
degree(mention_graph, mode = "in")
mention_data <- data.frame(
graph_type = "mention",
degree_in = degree(mention_graph, mode = "in"),
degree_out = degree(mention_graph, mode = "out"),
io_ratio = degree_in / degree_out
)
dnorm(60, mean = 71, sd = 15)
t <- read.csv("https://assets.datacamp.com/production/repositories/1576/datasets/7a52a18bc881e56fa9f1b6c1bb1c5a8c7034feec/divvy_bike_sample.csv")
# Load data from csv:
bike_dat <- read.csv("divvy_bike_sample.csv")
getwd()
# Load data from csv:
bike_dat <- read.csv("BikeSharing/divvy_bike_sample.csv")
View(bike_dat)
## == Making Graphs of Different User Types
# Let's compare graphs of people who subscribe to the divvy bike vs. more casual non-subscribing customers.
library(dplyr)
renv::install("dply")
renv::install("dplyr")
## == Making Graphs of Different User Types
# Let's compare graphs of people who subscribe to the divvy bike vs. more casual non-subscribing customers.
library(dplyr)
library(magrittr)
library(igraph)
subscribers <- bike_dat %>%
# Filter for rows where usertype is Subscriber
filter(usertype == "Subscriber")
# Count the number of subscriber trips
n_subscriber_trips <- nrow(subscribers)
subscriber_trip_graph <- subscribers %>%
# Group by from_station_id and to_station_id
group_by(from_station_id, to_station_id) %>%
# Calculate summary statistics
summarize(
# Set weights as proportion of total trips
weights = n() / n_subscriber_trips
) %>%
# Make a graph from the data frame
graph_from_data_frame()
customers <- bike_dat %>%
# Filter for rows where usertype is "Customer"
filter(usertype == "Customer")
# Count the number of customer trips
n_customer_trips <- nrow(customers)
customer_trip_graph <- customers %>%
# Group by from_station_id and to_station_id
group_by(from_station_id, to_station_id) %>%
# Calculate summary statistics
summarize(
# Set weights as proportion of total trips
weights = n() / n_customer_trips
) %>%
# Make a graph from the data frame
graph_from_data_frame()
# Calculate number of different trips by subscribers
gsize(subscriber_trip_graph)
# Calculate number of different trips by customers
gsize(customer_trip_graph)
# Induce a subgraph from subscriber_trip_graph of the first 12 vertices
twelve_subscriber_trip_graph <- induced_subgraph(subscriber_trip_graph, 1:12)
# Plot the subgraph and title it "Subscribers"
plot(
twelve_subscriber_trip_graph,
main = "Subscribers"
)
# Induce a subgraph from customer_trip_graph of the first 12 vertices
twelve_customer_trip_graph <- induced_subgraph(customer_trip_graph, 1:12)
# Plot the subgraph
plot(
twelve_customer_trip_graph,
main = "Customers"
)
# Get the diameter of the subscriber graph
get_diameter(subscriber_trip_graph)
# Get the diameter of the customer graph
get_diameter(customer_trip_graph)
# Find the farthest vertices of the subscriber graph
farthest_vertices(subscriber_trip_graph)
# Find the farthest vertices of the customer graph
farthest_vertices(customer_trip_graph)
# Calc physical distance between end stations for subscriber graph
calc_physical_distance_m(200, 298)
# Calc physical distance between end stations for customer graph
calc_physical_distance_m(116, 281)
renv::install("geosphere")
library(geosphere)
# Calc physical distance between end stations for subscriber graph
calc_physical_distance_m(200, 298)
# Find the farthest vertices of the subscriber graph
farthest_vertices(subscriber_trip_graph)
# Find the farthest vertices of the customer graph
farthest_vertices(customer_trip_graph)
# Calc physical distance between end stations for subscriber graph
calc_physical_distance_m(200, 298)
order(c(100,10,1000))
?factor
x = factor(c(1, 2), c("d", "e"))
x = factor(x = c(1, 2), c("d", "e"))
x = factor(x = c(1, 2), levels = c("d", "e"))
x = factor(c(1:2), levels = c("d", "e"))
x = factor(c('1','2'), levels = c("d", "e"))
x
x = factor(1:2, levels = c("d", "e"))
getwd()
